<script type="text/javascript">
<!-- 
document.writeln(" <?php "); 
document.writeln(" /* "); 
document.writeln(" miniProxy - A simple PHP web proxy. <https://github.com/joshdick/miniProxy> "); 
document.writeln(" Written and maintained by Joshua Dick <http://joshdick.net>. "); 
document.writeln(" miniProxy is licensed under the GNU GPL v3 <http://www.gnu.org/licenses/gpl.html>. "); 
document.writeln(" */ "); 
document.writeln(" /****************************** START CONFIGURATION ******************************/ "); 
document.writeln(" //To allow proxying any URL, set $whitelistPatterns to an empty array (the default). "); 
document.writeln(" //To only allow proxying of specific URLs (whitelist), add corresponding regular expressions "); 
document.writeln(" //to the $whitelistPatterns array. Enter the most specific patterns possible, to prevent possible abuse. "); 
document.writeln(" //You can optionally use the \"getHostnamePattern()\" helper function to build a regular expression that "); 
document.writeln(" //matches all URLs for a given hostname. "); 
document.writeln(" $whitelistPatterns = array( "); 
document.writeln("   //Usage example: To support any URL at example.net, including sub-domains, uncomment the "); 
document.writeln("   //line below (which is equivalent to [ @^https?://([a-z0-9-]+\.)*example\.net@i ]): "); 
document.writeln("   //getHostnamePattern(\"example.net\") "); 
document.writeln(" ); "); 
document.writeln(" //To enable CORS (cross-origin resource sharing) for proxied sites, set $forceCORS to true. "); 
document.writeln(" $forceCORS = false; "); 
document.writeln(" //Set to false to report the client machine's IP address to proxied sites via the HTTP `x-forwarded-for` header. "); 
document.writeln(" //Setting to false may improve compatibility with some sites, but also exposes more information about end users to proxied sites. "); 
document.writeln(" $anonymize = true; "); 
document.writeln(" //Start/default URL that that will be proxied when miniProxy is first loaded in a browser/accessed directly with no URL to proxy. "); 
document.writeln(" //If empty, miniProxy will show its own landing page. "); 
document.writeln(" $startURL = \"\"; "); 
document.writeln(" //When no $startURL is configured above, miniProxy will show its own landing page with a URL form field "); 
document.writeln(" //and the configured example URL. The example URL appears in the instructional text on the miniProxy landing page, "); 
document.writeln(" //and is proxied when pressing the 'Proxy It!' button on the landing page if its URL form is left blank. "); 
document.writeln(" $landingExampleURL = \"https://mbasic.facebook.com/ousama.info\"; "); 
document.writeln(" /****************************** END CONFIGURATION ******************************/ "); 
document.writeln(" ob_start(\"ob_gzhandler\"); "); 
document.writeln(" if (version_compare(PHP_VERSION, \"5.4.7\", \"<\")) { "); 
document.writeln("   die(\"oussama info requires PHP version 5.4.7 or later.\"); "); 
document.writeln(" } "); 
document.writeln(" $requiredExtensions = ['curl', 'mbstring', 'xml']; "); 
document.writeln(" foreach($requiredExtensions as $requiredExtension) { "); 
document.writeln("   if (!extension_loaded($requiredExtension)) { "); 
document.writeln("     die(\"oussama info requires PHP's \\"\" . $requiredExtension . \"\\" extension. Please install/enable it on your server and try again.\"); "); 
document.writeln("   } "); 
document.writeln(" } "); 
document.writeln(" //Helper function for use inside $whitelistPatterns. "); 
document.writeln(" //Returns a regex that matches all HTTP[S] URLs for a given hostname. "); 
document.writeln(" function getHostnamePattern($hostname) { "); 
document.writeln("   $escapedHostname = str_replace(\".\", \"\.\", $hostname); "); 
document.writeln("   return \"@^https?://([a-z0-9-]+\.)*\" . $escapedHostname . \"@i\"; "); 
document.writeln(" } "); 
document.writeln(" //Helper function used to removes/unset keys from an associative array using case insensitive matching "); 
document.writeln(" function removeKeys(&$assoc, $keys2remove) { "); 
document.writeln("   $keys = array_keys($assoc); "); 
document.writeln("   $map = array(); "); 
document.writeln("   $removedKeys = array(); "); 
document.writeln("   foreach ($keys as $key) { "); 
document.writeln("     $map[strtolower($key)] = $key; "); 
document.writeln("   } "); 
document.writeln("   foreach ($keys2remove as $key) { "); 
document.writeln("     $key = strtolower($key); "); 
document.writeln("     if (isset($map[$key])) { "); 
document.writeln("       unset($assoc[$map[$key]]); "); 
document.writeln("       $removedKeys[] = $map[$key]; "); 
document.writeln("     } "); 
document.writeln("   } "); 
document.writeln("   return $removedKeys; "); 
document.writeln(" } "); 
document.writeln(" if (!function_exists(\"getallheaders\")) { "); 
document.writeln("   //Adapted from http://www.php.net/manual/en/function.getallheaders.php#99814 "); 
document.writeln("   function getallheaders() { "); 
document.writeln("     $result = array(); "); 
document.writeln("     foreach($_SERVER as $key => $value) { "); 
document.writeln("       if (substr($key, 0, 5) == \"HTTP_\") { "); 
document.writeln("         $key = str_replace(\" \", \"-\", ucwords(strtolower(str_replace(\"_\", \" \", substr($key, 5))))); "); 
document.writeln("         $result[$key] = $value; "); 
document.writeln("       } "); 
document.writeln("     } "); 
document.writeln("     return $result; "); 
document.writeln("   } "); 
document.writeln(" } "); 
document.writeln(" $usingDefaultPort =  (!isset($_SERVER[\"HTTPS\"]) && $_SERVER[\"SERVER_PORT\"] === 80) || (isset($_SERVER[\"HTTPS\"]) && $_SERVER[\"SERVER_PORT\"] === 443); "); 
document.writeln(" $prefixPort = $usingDefaultPort ? \"\" : \":\" . $_SERVER[\"SERVER_PORT\"]; "); 
document.writeln(" //Use HTTP_HOST to support client-configured DNS (instead of SERVER_NAME), but remove the port if one is present "); 
document.writeln(" $prefixHost = $_SERVER[\"HTTP_HOST\"]; "); 
document.writeln(" $prefixHost = strpos($prefixHost, \":\") ? implode(\":\", explode(\":\", $_SERVER[\"HTTP_HOST\"], -1)) : $prefixHost; "); 
document.writeln(" define(\"PROXY_PREFIX\", \"http\" . (isset($_SERVER[\"HTTPS\"]) ? \"s\" : \"\") . \"://\" . $prefixHost . $prefixPort . $_SERVER[\"SCRIPT_NAME\"] . \"?\"); "); 
document.writeln(" //Makes an HTTP request via cURL, using request data that was passed directly to this script. "); 
document.writeln(" function makeRequest($url) { "); 
document.writeln("   global $anonymize; "); 
document.writeln("   //Tell cURL to make the request using the brower's user-agent if there is one, or a fallback user-agent otherwise. "); 
document.writeln("   $user_agent = $_SERVER[\"HTTP_USER_AGENT\"]; "); 
document.writeln("   if (empty($user_agent)) { "); 
document.writeln("     $user_agent = \"Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40)(compatible; oussama info)\"; "); 
document.writeln("   } "); 
document.writeln("   $ch = curl_init(); "); 
document.writeln("   curl_setopt($ch, CURLOPT_USERAGENT, $user_agent); "); 
document.writeln("   //Get ready to proxy the browser's request headers... "); 
document.writeln("   $browserRequestHeaders = getallheaders(); "); 
document.writeln("   //...but let cURL set some headers on its own. "); 
document.writeln("   $removedHeaders = removeKeys($browserRequestHeaders, array( "); 
document.writeln("     \"Accept-Encoding\", //Throw away the browser's Accept-Encoding header if any and let cURL make the request using gzip if possible. "); 
document.writeln("     \"Content-Length\", "); 
document.writeln("     \"Host\", "); 
document.writeln("     \"Origin\" "); 
document.writeln("   )); "); 
document.writeln("   array_change_key_case($removedHeaders, CASE_LOWER); "); 
document.writeln("   curl_setopt($ch, CURLOPT_ENCODING, \"\"); "); 
document.writeln("   //Transform the associative array from getallheaders() into an "); 
document.writeln("   //indexed array of header strings to be passed to cURL. "); 
document.writeln("   $curlRequestHeaders = array(); "); 
document.writeln("   foreach ($browserRequestHeaders as $name => $value) { "); 
document.writeln("     $curlRequestHeaders[] = $name . \": \" . $value; "); 
document.writeln("   } "); 
document.writeln("   if (!$anonymize) { "); 
document.writeln("     $curlRequestHeaders[] = \"X-Forwarded-For: \" . $_SERVER[\"REMOTE_ADDR\"]; "); 
document.writeln("   } "); 
document.writeln("   //Any `origin` header sent by the browser will refer to the proxy itself. "); 
document.writeln("   //If an `origin` header is present in the request, rewrite it to point to the correct origin. "); 
document.writeln("   if (array_key_exists('origin', $removedHeaders)) { "); 
document.writeln("     $urlParts = parse_url($url); "); 
document.writeln("     $port = $urlParts['port']; "); 
document.writeln("     $curlRequestHeaders[] = \"Origin: \" . $urlParts['scheme'] . \"://\" . $urlParts['host'] . (empty($port) ? \"\" : \":\" . $port); "); 
document.writeln("   }; "); 
document.writeln("   curl_setopt($ch, CURLOPT_HTTPHEADER, $curlRequestHeaders); "); 
document.writeln("   //Proxy any received GET/POST/PUT data. "); 
document.writeln("   switch ($_SERVER[\"REQUEST_METHOD\"]) { "); 
document.writeln("     case \"POST\": "); 
document.writeln("       curl_setopt($ch, CURLOPT_POST, true); "); 
document.writeln("       //For some reason, $HTTP_RAW_POST_DATA isn't working as documented at "); 
document.writeln("       //http://php.net/manual/en/reserved.variables.httprawpostdata.php "); 
document.writeln("       //but the php://input method works. This is likely to be flaky "); 
document.writeln("       //across different server environments. "); 
document.writeln("       //More info here: http://stackoverflow.com/questions/8899239/http-raw-post-data-not-being-populated-after-upgrade-to-php-5-3 "); 
document.writeln("       //If the miniProxyFormAction field appears in the POST data, remove it so the destination server doesn't receive it. "); 
document.writeln("       $postData = Array(); "); 
document.writeln("       parse_str(file_get_contents(\"php://input\"), $postData); "); 
document.writeln("       if (isset($postData[\"oussamaFormAction\"])) { "); 
document.writeln("         unset($postData[\"oussamaFormAction\"]); "); 
document.writeln("       } "); 
document.writeln("       curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData)); "); 
document.writeln("     break; "); 
document.writeln("     case \"PUT\": "); 
document.writeln("       curl_setopt($ch, CURLOPT_PUT, true); "); 
document.writeln("       curl_setopt($ch, CURLOPT_INFILE, fopen(\"php://input\", \"r\")); "); 
document.writeln("     break; "); 
document.writeln("   } "); 
document.writeln("   //Other cURL options. "); 
document.writeln("   curl_setopt($ch, CURLOPT_HEADER, true); "); 
document.writeln("   curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); "); 
document.writeln("   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); "); 
document.writeln("   //Set the request URL. "); 
document.writeln("   curl_setopt($ch, CURLOPT_URL, $url); "); 
document.writeln("   //Make the request. "); 
document.writeln("   $response = curl_exec($ch); "); 
document.writeln("   $responseInfo = curl_getinfo($ch); "); 
document.writeln("   $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE); "); 
document.writeln("   curl_close($ch); "); 
document.writeln("   //Setting CURLOPT_HEADER to true above forces the response headers and body "); 
document.writeln("   //to be output together--separate them. "); 
document.writeln("   $responseHeaders = substr($response, 0, $headerSize); "); 
document.writeln("   $responseBody = substr($response, $headerSize); "); 
document.writeln("   return array(\"headers\" => $responseHeaders, \"body\" => $responseBody, \"responseInfo\" => $responseInfo); "); 
document.writeln(" } "); 
document.writeln(" //Converts relative URLs to absolute ones, given a base URL. "); 
document.writeln(" //Modified version of code found at http://nashruddin.com/PHP_Script_for_Converting_Relative_to_Absolute_URL "); 
document.writeln(" function rel2abs($rel, $base) { "); 
document.writeln("   if (empty($rel)) $rel = \".\"; "); 
document.writeln("   if (parse_url($rel, PHP_URL_SCHEME) != \"\" || strpos($rel, \"//\") === 0) return $rel; //Return if already an absolute URL "); 
document.writeln("   if ($rel[0] == \"#\" || $rel[0] == \"?\") return $base.$rel; //Queries and anchors "); 
document.writeln("   extract(parse_url($base)); //Parse base URL and convert to local variables: $scheme, $host, $path "); 
document.writeln("   $path = isset($path) ? preg_replace(\"#/[^/]*$#\", \"\", $path) : \"/\"; //Remove non-directory element from path "); 
document.writeln("   if ($rel[0] == \"/\") $path = \"\"; //Destroy path if relative url points to root "); 
document.writeln("   $port = isset($port) && $port != 80 ? \":\" . $port : \"\"; "); 
document.writeln("   $auth = \"\"; "); 
document.writeln("   if (isset($user)) { "); 
document.writeln("     $auth = $user; "); 
document.writeln("     if (isset($pass)) { "); 
document.writeln("       $auth .= \":\" . $pass; "); 
document.writeln("     } "); 
document.writeln("     $auth .= \"@\"; "); 
document.writeln("   } "); 
document.writeln("   $abs = \"$auth$host$port$path/$rel\"; //Dirty absolute URL "); 
document.writeln("   for ($n = 1; $n > 0; $abs = preg_replace(array(\"#(/\.?/)#\", \"#/(?!\.\.)[^/]+/\.\./#\"), \"/\", $abs, -1, $n)) {} //Replace '//' or '/./' or '/foo/../' with '/' "); 
document.writeln("   return $scheme . \"://\" . $abs; //Absolute URL is ready. "); 
document.writeln(" } "); 
document.writeln(" //Proxify contents of url() references in blocks of CSS text. "); 
document.writeln(" function proxifyCSS($css, $baseURL) { "); 
document.writeln("   // Add a \"url()\" wrapper to any CSS @import rules that only specify a URL without the wrapper, "); 
document.writeln("   // so that they're proxified when searching for \"url()\" wrappers below. "); 
document.writeln("   $sourceLines = explode(\"\n\", $css); "); 
document.writeln("   $normalizedLines = []; "); 
document.writeln("   foreach ($sourceLines as $line) { "); 
document.writeln("     if (preg_match(\"/@import\s+url/i\", $line)) { "); 
document.writeln("       $normalizedLines[] = $line; "); 
document.writeln("     } else { "); 
document.writeln("       $normalizedLines[] = preg_replace_callback( "); 
document.writeln("         \"/(@import\s+)([^;\s]+)([\s;])/i\", "); 
document.writeln("         function($matches) use ($baseURL) { "); 
document.writeln("           return $matches[1] . \"url(\" . $matches[2] . \")\" . $matches[3]; "); 
document.writeln("         }, "); 
document.writeln("         $line); "); 
document.writeln("     } "); 
document.writeln("   } "); 
document.writeln("   $normalizedCSS = implode(\"\n\", $normalizedLines); "); 
document.writeln("   return preg_replace_callback( "); 
document.writeln("     \"/url\((.*?)\)/i\", "); 
document.writeln("     function($matches) use ($baseURL) { "); 
document.writeln("         $url = $matches[1]; "); 
document.writeln("         //Remove any surrounding single or double quotes from the URL so it can be passed to rel2abs - the quotes are optional in CSS "); 
document.writeln("         //Assume that if there is a leading quote then there should be a trailing quote, so just use trim() to remove them "); 
document.writeln("         if (strpos($url, \"'\") === 0) { "); 
document.writeln("           $url = trim($url, \"'\"); "); 
document.writeln("         } "); 
document.writeln("         if (strpos($url, \"\\"\") === 0) { "); 
document.writeln("           $url = trim($url, \"\\"\"); "); 
document.writeln("         } "); 
document.writeln("         if (stripos($url, \"data:\") === 0) return \"url(\" . $url . \")\"; //The URL isn't an HTTP URL but is actual binary data. Don't proxify it. "); 
document.writeln("         return \"url(\" . PROXY_PREFIX . rel2abs($url, $baseURL) . \")\"; "); 
document.writeln("     }, "); 
document.writeln("     $normalizedCSS); "); 
document.writeln(" } "); 
document.writeln(" //Proxify \"srcset\" attributes (normally associated with <img> tags.) "); 
document.writeln(" function proxifySrcset($srcset, $baseURL) { "); 
document.writeln("   $sources = array_map(\"trim\", explode(\",\", $srcset)); //Split all contents by comma and trim each value "); 
document.writeln("   $proxifiedSources = array_map(function($source) use ($baseURL) { "); 
document.writeln("     $components = array_map(\"trim\", str_split($source, strrpos($source, \" \"))); //Split by last space and trim "); 
document.writeln("     $components[0] = PROXY_PREFIX . rel2abs(ltrim($components[0], \"/\"), $baseURL); //First component of the split source string should be an image URL; proxify it "); 
document.writeln("     return implode($components, \" \"); //Recombine the components into a single source "); 
document.writeln("   }, $sources); "); 
document.writeln("   $proxifiedSrcset = implode(\", \", $proxifiedSources); //Recombine the sources into a single \"srcset\" "); 
document.writeln("   return $proxifiedSrcset; "); 
document.writeln(" } "); 
document.writeln(" //Extract and sanitize the requested URL, handling cases where forms have been rewritten to point to the proxy. "); 
document.writeln(" if (isset($_POST[\"oussamaFormAction\"])) { "); 
document.writeln("   $url = $_POST[\"oussamaFormAction\"]; "); 
document.writeln("   unset($_POST[\"oussamaFormAction\"]); "); 
document.writeln(" } else { "); 
document.writeln("   $queryParams = Array(); "); 
document.writeln("   parse_str($_SERVER[\"QUERY_STRING\"], $queryParams); "); 
document.writeln("   //If the miniProxyFormAction field appears in the query string, make $url start with its value, and rebuild the the query string without it. "); 
document.writeln("   if (isset($queryParams[\"oussamaFormAction\"])) { "); 
document.writeln("     $formAction = $queryParams[\"oussamaFormAction\"]; "); 
document.writeln("     unset($queryParams[\"oussamaFormAction\"]); "); 
document.writeln("     $url = $formAction . \"?\" . http_build_query($queryParams); "); 
document.writeln("   } else { "); 
document.writeln("     $url = substr($_SERVER[\"REQUEST_URI\"], strlen($_SERVER[\"SCRIPT_NAME\"]) + 1); "); 
document.writeln("   } "); 
document.writeln(" } "); 
document.writeln(" if (empty($url)) { "); 
document.writeln("     if (empty($startURL)) { "); 
document.writeln("       die(\"<html><head><title>Oussama information</title></head><body><h1>Welcome to Proxy By OUSSAMA!</h1>: <a href=\\"\" . PROXY_PREFIX . $landingExampleURL . \"\\">\" . PROXY_PREFIX . $landingExampleURL . \"</a><br /><br />Or, URL:<br /><br /><form onsubmit=\\"if (document.getElementById('site').value) { window.location.href='\" . PROXY_PREFIX . \"' + document.getElementById('site').value; return false; } else { window.location.href='\" . PROXY_PREFIX . $landingExampleURL . \"'; return false; }\\" autocomplete=\\"off\\"><input id=\\"site\\" type=\\"text\\" size=\\"50\\" /><input type=\\"submit\\" value=\\"Go\\" /></form></body></html>\"); "); 
document.writeln("     } else { "); 
document.writeln("       $url = $startURL; "); 
document.writeln("     } "); 
document.writeln(" } else if (strpos($url, \":/\") !== strpos($url, \"://\")) { "); 
document.writeln("     //Work around the fact that some web servers (e.g. IIS 8.5) change double slashes appearing in the URL to a single slash. "); 
document.writeln("     //See https://github.com/joshdick/miniProxy/pull/14 "); 
document.writeln("     $pos = strpos($url, \":/\"); "); 
document.writeln("     $url = substr_replace($url, \"://\", $pos, strlen(\":/\")); "); 
document.writeln(" } "); 
document.writeln(" $scheme = parse_url($url, PHP_URL_SCHEME); "); 
document.writeln(" if (empty($scheme)) { "); 
document.writeln("   //Assume that any supplied URLs starting with // are HTTP URLs. "); 
document.writeln("   if (strpos($url, \"//\") === 0) { "); 
document.writeln("     $url = \"http:\" . $url; "); 
document.writeln("   } "); 
document.writeln(" } else if (!preg_match(\"/^https?$/i\", $scheme)) { "); 
document.writeln("     die('Error: Detected a \"' . $scheme . '\" URL. oussama exclusively supports http[s] URLs.'); "); 
document.writeln(" } "); 
document.writeln(" //Validate the requested URL against the whitelist. "); 
document.writeln(" $urlIsValid = count($whitelistPatterns) === 0; "); 
document.writeln(" foreach ($whitelistPatterns as $pattern) { "); 
document.writeln("   if (preg_match($pattern, $url)) { "); 
document.writeln("     $urlIsValid = true; "); 
document.writeln("     break; "); 
document.writeln("   } "); 
document.writeln(" } "); 
document.writeln(" if (!$urlIsValid) { "); 
document.writeln("   die(\"Error: The requested URL was disallowed by the server administrator.\"); "); 
document.writeln(" } "); 
document.writeln(" $response = makeRequest($url); "); 
document.writeln(" $rawResponseHeaders = $response[\"headers\"]; "); 
document.writeln(" $responseBody = $response[\"body\"]; "); 
document.writeln(" $responseInfo = $response[\"responseInfo\"]; "); 
document.writeln(" //If CURLOPT_FOLLOWLOCATION landed the proxy at a diferent URL than "); 
document.writeln(" //what was requested, explicitly redirect the proxy there. "); 
document.writeln(" $responseURL = $responseInfo[\"url\"]; "); 
document.writeln(" if ($responseURL !== $url) { "); 
document.writeln("   header(\"Location: \" . PROXY_PREFIX . $responseURL, true); "); 
document.writeln("   exit(0); "); 
document.writeln(" } "); 
document.writeln(" //A regex that indicates which server response headers should be stripped out of the proxified response. "); 
document.writeln(" $header_blacklist_pattern = \"/^Content-Length|^Transfer-Encoding|^Content-Encoding.*gzip/i\"; "); 
document.writeln(" //cURL can make multiple requests internally (for example, if CURLOPT_FOLLOWLOCATION is enabled), and reports "); 
document.writeln(" //headers for every request it makes. Only proxy the last set of received response headers, "); 
document.writeln(" //corresponding to the final request made by cURL for any given call to makeRequest(). "); 
document.writeln(" $responseHeaderBlocks = array_filter(explode(\"\r\n\r\n\", $rawResponseHeaders)); "); 
document.writeln(" $lastHeaderBlock = end($responseHeaderBlocks); "); 
document.writeln(" $headerLines = explode(\"\r\n\", $lastHeaderBlock); "); 
document.writeln(" foreach ($headerLines as $header) { "); 
document.writeln("   $header = trim($header); "); 
document.writeln("   if (!preg_match($header_blacklist_pattern, $header)) { "); 
document.writeln("     header($header, false); "); 
document.writeln("   } "); 
document.writeln(" } "); 
document.writeln(" //Prevent robots from indexing proxified pages "); 
document.writeln(" header(\"X-Robots-Tag: noindex, nofollow\", true); "); 
document.writeln(" if ($forceCORS) { "); 
document.writeln("   //This logic is based on code found at: http://stackoverflow.com/a/9866124/278810 "); 
document.writeln("   //CORS headers sent below may conflict with CORS headers from the original response, "); 
document.writeln("   //so these headers are sent after the original response headers to ensure their values "); 
document.writeln("   //are the ones that actually end up getting sent to the browser. "); 
document.writeln("   //Explicit [ $replace = true ] is used for these headers even though this is PHP's default behavior. "); 
document.writeln("   //Allow access from any origin. "); 
document.writeln("   header(\"Access-Control-Allow-Origin: *\", true); "); 
document.writeln("   header(\"Access-Control-Allow-Credentials: true\", true); "); 
document.writeln("   //Handle CORS headers received during OPTIONS requests. "); 
document.writeln("   if ($_SERVER[\"REQUEST_METHOD\"] == \"OPTIONS\") { "); 
document.writeln("     if (isset($_SERVER[\"HTTP_ACCESS_CONTROL_REQUEST_METHOD\"])) { "); 
document.writeln("       header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\", true); "); 
document.writeln("     } "); 
document.writeln("     if (isset($_SERVER[\"HTTP_ACCESS_CONTROL_REQUEST_HEADERS\"])) { "); 
document.writeln("       header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\", true); "); 
document.writeln("     } "); 
document.writeln("     //No further action is needed for OPTIONS requests. "); 
document.writeln("     exit(0); "); 
document.writeln("   } "); 
document.writeln(" } "); 
document.writeln(" $contentType = \"\"; "); 
document.writeln(" if (isset($responseInfo[\"content_type\"])) $contentType = $responseInfo[\"content_type\"]; "); 
document.writeln(" //This is presumably a web page, so attempt to proxify the DOM. "); 
document.writeln(" if (stripos($contentType, \"text/html\") !== false) { "); 
document.writeln("   //Attempt to normalize character encoding. "); 
document.writeln("   $detectedEncoding = mb_detect_encoding($responseBody, \"UTF-8, ISO-8859-1\"); "); 
document.writeln("   if ($detectedEncoding) { "); 
document.writeln("     $responseBody = mb_convert_encoding($responseBody, \"HTML-ENTITIES\", $detectedEncoding); "); 
document.writeln("   } "); 
document.writeln("   //Parse the DOM. "); 
document.writeln("   $doc = new DomDocument(); "); 
document.writeln("   @$doc->loadHTML($responseBody); "); 
document.writeln("   $xpath = new DOMXPath($doc); "); 
document.writeln("   //Rewrite forms so that their actions point back to the proxy. "); 
document.writeln("   foreach($xpath->query(\"//form\") as $form) { "); 
document.writeln("     $method = $form->getAttribute(\"method\"); "); 
document.writeln("     $action = $form->getAttribute(\"action\"); "); 
document.writeln("     //If the form doesn't have an action, the action is the page itself. "); 
document.writeln("     //Otherwise, change an existing action to an absolute version. "); 
document.writeln("     $action = empty($action) ? $url : rel2abs($action, $url); "); 
document.writeln("     //Rewrite the form action to point back at the proxy. "); 
document.writeln("     $form->setAttribute(\"action\", rtrim(PROXY_PREFIX, \"?\")); "); 
document.writeln("     //Add a hidden form field that the proxy can later use to retreive the original form action. "); 
document.writeln("     $actionInput = $doc->createDocumentFragment(); "); 
document.writeln("     $actionInput->appendXML('<input type=\"hidden\" name=\"oussamaFormAction\" value=\"' . htmlspecialchars($action) . '\" />'); "); 
document.writeln("     $form->appendChild($actionInput); "); 
document.writeln("   } "); 
document.writeln("   //Proxify <meta> tags with an 'http-equiv=\"refresh\"' attribute. "); 
document.writeln("   foreach ($xpath->query(\"//meta[@http-equiv]\") as $element) { "); 
document.writeln("     if (strcasecmp($element->getAttribute(\"http-equiv\"), \"refresh\") === 0) { "); 
document.writeln("       $content = $element->getAttribute(\"content\"); "); 
document.writeln("       if (!empty($content)) { "); 
document.writeln("         $splitContent = preg_split(\"/=/\", $content); "); 
document.writeln("         if (isset($splitContent[1])) { "); 
document.writeln("           $element->setAttribute(\"content\", $splitContent[0] . \"=\" . PROXY_PREFIX . rel2abs($splitContent[1], $url)); "); 
document.writeln("         } "); 
document.writeln("       } "); 
document.writeln("     } "); 
document.writeln("   } "); 
document.writeln("   //Profixy <style> tags. "); 
document.writeln("   foreach($xpath->query(\"//style\") as $style) { "); 
document.writeln("     $style->nodeValue = proxifyCSS($style->nodeValue, $url); "); 
document.writeln("   } "); 
document.writeln("   //Proxify tags with a \"style\" attribute. "); 
document.writeln("   foreach ($xpath->query(\"//*[@style]\") as $element) { "); 
document.writeln("     $element->setAttribute(\"style\", proxifyCSS($element->getAttribute(\"style\"), $url)); "); 
document.writeln("   } "); 
document.writeln("   //Proxify \"srcset\" attributes in <img> tags. "); 
document.writeln("   foreach ($xpath->query(\"//img[@srcset]\") as $element) { "); 
document.writeln("     $element->setAttribute(\"srcset\", proxifySrcset($element->getAttribute(\"srcset\"), $url)); "); 
document.writeln("   } "); 
document.writeln("   //Proxify any of these attributes appearing in any tag. "); 
document.writeln("   $proxifyAttributes = array(\"href\", \"src\"); "); 
document.writeln("   foreach($proxifyAttributes as $attrName) { "); 
document.writeln("     foreach($xpath->query(\"//*[@\" . $attrName . \"]\") as $element) { //For every element with the given attribute... "); 
document.writeln("       $attrContent = $element->getAttribute($attrName); "); 
document.writeln("       if ($attrName == \"href\" && preg_match(\"/^(about|javascript|magnet|mailto):|#/i\", $attrContent)) continue; "); 
document.writeln("       if ($attrName == \"src\" && preg_match(\"/^(data):/i\", $attrContent)) continue; "); 
document.writeln("       $attrContent = rel2abs($attrContent, $url); "); 
document.writeln("       $attrContent = PROXY_PREFIX . $attrContent; "); 
document.writeln("       $element->setAttribute($attrName, $attrContent); "); 
document.writeln("     } "); 
document.writeln("   } "); 
document.writeln("   //Attempt to force AJAX requests to be made through the proxy by "); 
document.writeln("   //wrapping window.XMLHttpRequest.prototype.open in order to make "); 
document.writeln("   //all request URLs absolute and point back to the proxy. "); 
document.writeln("   //The rel2abs() JavaScript function serves the same purpose as the server-side one in this file, "); 
document.writeln("   //but is used in the browser to ensure all AJAX request URLs are absolute and not relative. "); 
document.writeln("   //Uses code from these sources: "); 
document.writeln("   //http://stackoverflow.com/questions/7775767/javascript-overriding-xmlhttprequest-open "); 
document.writeln("   //https://gist.github.com/1088850 "); 
document.writeln("   //TODO: This is obviously only useful for browsers that use XMLHttpRequest but "); 
document.writeln("   //it's better than nothing. "); 
document.writeln("   $head = $xpath->query(\"//head\")->item(0); "); 
document.writeln("   $body = $xpath->query(\"//body\")->item(0); "); 
document.writeln("   $prependElem = $head != NULL ? $head : $body; "); 
document.writeln("   //Only bother trying to apply this hack if the DOM has a <head> or <body> element; "); 
document.writeln("   //insert some JavaScript at the top of whichever is available first. "); 
document.writeln("   //Protects against cases where the server sends a Content-Type of \"text/html\" when "); 
document.writeln("   //what's coming back is most likely not actually HTML. "); 
document.writeln("   //TODO: Do this check before attempting to do any sort of DOM parsing? "); 
document.writeln("   if ($prependElem != NULL) { "); 
document.writeln("     $scriptElem = $doc->createElement(\"script\", "); 
document.writeln("       '(function() { "); 
document.writeln("         if (window.XMLHttpRequest) { "); 
document.writeln("           function parseURI(url) { "); 
document.writeln("             var m = String(url).replace(/^\s+|\s+$/g, \"\").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/); "); 
document.writeln("             // authority = \"//\" + user + \":\" + pass \"@\" + hostname + \":\" port "); 
document.writeln("             return (m ? { "); 
document.writeln("               href : m[0] || \"\", "); 
document.writeln("               protocol : m[1] || \"\", "); 
document.writeln("               authority: m[2] || \"\", "); 
document.writeln("               host : m[3] || \"\", "); 
document.writeln("               hostname : m[4] || \"\", "); 
document.writeln("               port : m[5] || \"\", "); 
document.writeln("               pathname : m[6] || \"\", "); 
document.writeln("               search : m[7] || \"\", "); 
document.writeln("               hash : m[8] || \"\" "); 
document.writeln("             } : null); "); 
document.writeln("           } "); 
document.writeln("           function rel2abs(base, href) { // RFC 3986 "); 
document.writeln("             function removeDotSegments(input) { "); 
document.writeln("               var output = []; "); 
document.writeln("               input.replace(/^(\.\.?(\/|$))+/, \"\") "); 
document.writeln("                 .replace(/\/(\.(\/|$))+/g, \"/\") "); 
document.writeln("                 .replace(/\/\.\.$/, \"/../\") "); 
document.writeln("                 .replace(/\/?[^\/]*/g, function (p) { "); 
document.writeln("                   if (p === \"/..\") { "); 
document.writeln("                     output.pop(); "); 
document.writeln("                   } else { "); 
document.writeln("                     output.push(p); "); 
document.writeln("                   } "); 
document.writeln("                 }); "); 
document.writeln("               return output.join(\"\").replace(/^\//, input.charAt(0) === \"/\" ? \"/\" : \"\"); "); 
document.writeln("             } "); 
document.writeln("             href = parseURI(href || \"\"); "); 
document.writeln("             base = parseURI(base || \"\"); "); 
document.writeln("             return !href || !base ? null : (href.protocol || base.protocol) + "); 
document.writeln("             (href.protocol || href.authority ? href.authority : base.authority) + "); 
document.writeln("             removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === \"/\" ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? \"/\" : \"\") + base.pathname.slice(0, base.pathname.lastIndexOf(\"/\") + 1) + href.pathname) : base.pathname)) + "); 
document.writeln("             (href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) + "); 
document.writeln("             href.hash; "); 
document.writeln("           } "); 
document.writeln("           var proxied = window.XMLHttpRequest.prototype.open; "); 
document.writeln("           window.XMLHttpRequest.prototype.open = function() { "); 
document.writeln("               if (arguments[1] !== null && arguments[1] !== undefined) { "); 
document.writeln("                 var url = arguments[1]; "); 
document.writeln("                 url = rel2abs(\"' . $url . '\", url); "); 
document.writeln("                 url = \"' . PROXY_PREFIX . '\" + url; "); 
document.writeln("                 arguments[1] = url; "); 
document.writeln("               } "); 
document.writeln("               return proxied.apply(this, [].slice.call(arguments)); "); 
document.writeln("           }; "); 
document.writeln("         } "); 
document.writeln("       })();' "); 
document.writeln("     ); "); 
document.writeln("     $scriptElem->setAttribute(\"type\", \"text/javascript\"); "); 
document.writeln("     $prependElem->insertBefore($scriptElem, $prependElem->firstChild); "); 
document.writeln("   } "); 
document.writeln("   echo \"<!-- Proxified page constructed by oussama -->\n\" . $doc->saveHTML(); "); 
document.writeln(" } else if (stripos($contentType, \"text/css\") !== false) { //This is CSS, so proxify url() references. "); 
document.writeln("   echo proxifyCSS($responseBody, $url); "); 
document.writeln(" } else { //This isn't a web page or CSS, so serve unmodified through the proxy with the correct headers (images, JavaScript, etc.) "); 
document.writeln("   header(\"Content-Length: \" . strlen($responseBody), true); "); 
document.writeln("   echo $responseBody; "); 
document.writeln(" } ");
 // -->
</script>
